import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardMedia,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Divider,
  Grid,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  useMediaQuery,
  useTheme,
} from '@mui/material';
import {\n  Close as CloseIcon,\n  Compare as CompareIcon,\n  LocationOn as LocationIcon,\n  BedOutlined,\n  BathtubOutlined,\n  SquareFootOutlined,\n  Check as CheckIcon,\n  Clear as ClearIcon,\n} from '@mui/icons-material';\n\ninterface Property {\n  id: string;\n  title: string;\n  price: number;\n  currency: string;\n  propertyType: string;\n  listingType: string;\n  bedrooms?: number;\n  bathrooms?: number;\n  floorArea?: number;\n  yearBuilt?: number;\n  location: {\n    city: string;\n    country: string;\n  };\n  images: string[];\n  features?: {\n    furnished?: boolean;\n    petFriendly?: boolean;\n    parking?: boolean;\n    garden?: boolean;\n    balcony?: boolean;\n    elevator?: boolean;\n    airConditioning?: boolean;\n    heating?: boolean;\n    fireplace?: boolean;\n    pool?: boolean;\n    gym?: boolean;\n    security?: boolean;\n  };\n  energyRating?: string;\n  condition?: string;\n}\n\ninterface PropertyComparisonProps {\n  properties: Property[];\n  open: boolean;\n  onClose: () => void;\n  onRemoveProperty: (propertyId: string) => void;\n}\n\nexport const PropertyComparison = ({\n  properties,\n  open,\n  onClose,\n  onRemoveProperty,\n}: PropertyComparisonProps) => {\n  const { t } = useTranslation(['property', 'common']);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n  const formatPrice = (price: number, currency: string) => {\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency,\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const renderFeatureIcon = (hasFeature?: boolean) => {\n    if (hasFeature === undefined) return '-';\n    return hasFeature ? (\n      <CheckIcon color=\"success\" fontSize=\"small\" />\n    ) : (\n      <ClearIcon color=\"error\" fontSize=\"small\" />\n    );\n  };\n\n  const comparisonRows = [\n    {\n      label: t('property:comparison.price'),\n      key: 'price',\n      render: (property: Property) => formatPrice(property.price, property.currency),\n    },\n    {\n      label: t('property:comparison.propertyType'),\n      key: 'propertyType',\n      render: (property: Property) => t(`property:types.${property.propertyType.toLowerCase()}`),\n    },\n    {\n      label: t('property:comparison.listingType'),\n      key: 'listingType',\n      render: (property: Property) => t(`property:listingTypes.${property.listingType.toLowerCase()}`),\n    },\n    {\n      label: t('property:comparison.bedrooms'),\n      key: 'bedrooms',\n      render: (property: Property) => property.bedrooms || '-',\n    },\n    {\n      label: t('property:comparison.bathrooms'),\n      key: 'bathrooms',\n      render: (property: Property) => property.bathrooms || '-',\n    },\n    {\n      label: t('property:comparison.floorArea'),\n      key: 'floorArea',\n      render: (property: Property) => property.floorArea ? `${property.floorArea} m²` : '-',\n    },\n    {\n      label: t('property:comparison.yearBuilt'),\n      key: 'yearBuilt',\n      render: (property: Property) => property.yearBuilt || '-',\n    },\n    {\n      label: t('property:comparison.energyRating'),\n      key: 'energyRating',\n      render: (property: Property) => property.energyRating || '-',\n    },\n    {\n      label: t('property:comparison.condition'),\n      key: 'condition',\n      render: (property: Property) => \n        property.condition ? t(`property:conditions.${property.condition.toLowerCase()}`) : '-',\n    },\n  ];\n\n  const featureRows = [\n    { label: t('property:features.furnished'), key: 'furnished' },\n    { label: t('property:features.petFriendly'), key: 'petFriendly' },\n    { label: t('property:features.parking'), key: 'parking' },\n    { label: t('property:features.garden'), key: 'garden' },\n    { label: t('property:features.balcony'), key: 'balcony' },\n    { label: t('property:features.elevator'), key: 'elevator' },\n    { label: t('property:features.airConditioning'), key: 'airConditioning' },\n    { label: t('property:features.heating'), key: 'heating' },\n    { label: t('property:features.fireplace'), key: 'fireplace' },\n    { label: t('property:features.pool'), key: 'pool' },\n    { label: t('property:features.gym'), key: 'gym' },\n    { label: t('property:features.security'), key: 'security' },\n  ];\n\n  if (isMobile) {\n    // Mobile view - show properties in cards\n    return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth=\"md\"\n        fullWidth\n        fullScreen\n      >\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <CompareIcon sx={{ mr: 1 }} />\n              {t('property:comparison.title')} ({properties.length})\n            </Box>\n            <IconButton onClick={onClose}>\n              <CloseIcon />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        \n        <DialogContent>\n          <Grid container spacing={2}>\n            {properties.map((property) => (\n              <Grid item xs={12} key={property.id}>\n                <Card>\n                  <Box sx={{ position: 'relative' }}>\n                    <CardMedia\n                      component=\"img\"\n                      height=\"200\"\n                      image={property.images[0]}\n                      alt={property.title}\n                    />\n                    <IconButton\n                      sx={{\n                        position: 'absolute',\n                        top: 8,\n                        right: 8,\n                        bgcolor: 'rgba(255, 255, 255, 0.8)',\n                      }}\n                      onClick={() => onRemoveProperty(property.id)}\n                    >\n                      <CloseIcon />\n                    </IconButton>\n                  </Box>\n                  \n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      {property.title}\n                    </Typography>\n                    \n                    <Typography variant=\"h5\" color=\"primary\" gutterBottom>\n                      {formatPrice(property.price, property.currency)}\n                    </Typography>\n                    \n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <LocationIcon fontSize=\"small\" color=\"action\" sx={{ mr: 0.5 }} />\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {property.location.city}, {property.location.country}\n                      </Typography>\n                    </Box>\n                    \n                    <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n                      {property.bedrooms !== undefined && (\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <BedOutlined fontSize=\"small\" color=\"action\" sx={{ mr: 0.5 }} />\n                          <Typography variant=\"body2\">{property.bedrooms}</Typography>\n                        </Box>\n                      )}\n                      {property.bathrooms !== undefined && (\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <BathtubOutlined fontSize=\"small\" color=\"action\" sx={{ mr: 0.5 }} />\n                          <Typography variant=\"body2\">{property.bathrooms}</Typography>\n                        </Box>\n                      )}\n                      {property.floorArea && (\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <SquareFootOutlined fontSize=\"small\" color=\"action\" sx={{ mr: 0.5 }} />\n                          <Typography variant=\"body2\">{property.floorArea} m²</Typography>\n                        </Box>\n                      )}\n                    </Box>\n                    \n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      <Chip\n                        label={t(`property:types.${property.propertyType.toLowerCase()}`)}\n                        size=\"small\"\n                        color=\"primary\"\n                      />\n                      <Chip\n                        label={t(`property:listingTypes.${property.listingType.toLowerCase()}`)}\n                        size=\"small\"\n                        color=\"secondary\"\n                      />\n                      {property.energyRating && (\n                        <Chip\n                          label={`Energy: ${property.energyRating}`}\n                          size=\"small\"\n                          variant=\"outlined\"\n                        />\n                      )}\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={onClose}>\n            {t('common:close')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  // Desktop view - show comparison table\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"xl\"\n      fullWidth\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <CompareIcon sx={{ mr: 1 }} />\n            {t('property:comparison.title')} ({properties.length})\n          </Box>\n          <IconButton onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell sx={{ width: 200 }}>\n                  {t('property:comparison.feature')}\n                </TableCell>\n                {properties.map((property) => (\n                  <TableCell key={property.id} align=\"center\" sx={{ minWidth: 250 }}>\n                    <Box>\n                      <Box sx={{ position: 'relative', mb: 2 }}>\n                        <img\n                          src={property.images[0]}\n                          alt={property.title}\n                          style={{\n                            width: '100%',\n                            height: 150,\n                            objectFit: 'cover',\n                            borderRadius: 8,\n                          }}\n                        />\n                        <IconButton\n                          size=\"small\"\n                          sx={{\n                            position: 'absolute',\n                            top: 4,\n                            right: 4,\n                            bgcolor: 'rgba(255, 255, 255, 0.8)',\n                          }}\n                          onClick={() => onRemoveProperty(property.id)}\n                        >\n                          <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Box>\n                      \n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\n                        {property.title}\n                      </Typography>\n                      \n                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                        <LocationIcon fontSize=\"small\" color=\"action\" sx={{ mr: 0.5 }} />\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {property.location.city}, {property.location.country}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            \n            <TableBody>\n              {/* Basic Information */}\n              {comparisonRows.map((row) => (\n                <TableRow key={row.key}>\n                  <TableCell component=\"th\" scope=\"row\" sx={{ fontWeight: 'bold' }}>\n                    {row.label}\n                  </TableCell>\n                  {properties.map((property) => (\n                    <TableCell key={property.id} align=\"center\">\n                      {row.render(property)}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n              \n              {/* Features Section */}\n              <TableRow>\n                <TableCell colSpan={properties.length + 1} sx={{ bgcolor: 'grey.100' }}>\n                  <Typography variant=\"h6\" sx={{ py: 1 }}>\n                    {t('property:comparison.features')}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n              \n              {featureRows.map((row) => (\n                <TableRow key={row.key}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.label}\n                  </TableCell>\n                  {properties.map((property) => (\n                    <TableCell key={property.id} align=\"center\">\n                      {renderFeatureIcon(property.features?.[row.key as keyof typeof property.features])}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>\n          {t('common:close')}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};